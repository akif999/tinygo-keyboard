package main

import (
	_ "embed"
	"fmt"
	"image/color"
	"log"
	"machine"
	"machine/usb"
	"math/rand"
	"runtime/volatile"
	"time"

	keyboard "github.com/sago35/tinygo-keyboard"
	"github.com/sago35/tinygo-keyboard/keycodes/jp"
	"tinygo.org/x/drivers/ws2812"
)

//go:embed vial.json
var def []byte

func main() {
	usb.Product = "xiao-kb01-0.1.0"

	err := run()
	if err != nil {
		log.Fatal(err)
	}
}

var (
	white = color.RGBA{0x3F, 0x3F, 0x3F, 0xFF}
	black = color.RGBA{0x00, 0x00, 0x00, 0xFF}
)

func run() error {
	var changed volatile.Register8
	changed.Set(0)

	neo := machine.D4
	neo.Configure(machine.PinConfig{Mode: machine.PinOutput})
	ws := ws2812.New(neo)
	wsLeds := [12]color.RGBA{}
	for i := range wsLeds {
		wsLeds[i] = black
	}

	d := keyboard.New()

	pins := []machine.Pin{
		machine.D0,
		machine.D1,
		machine.D2,
		machine.D3,
	}

	sm := d.AddSquaredMatrixKeyboard(pins, [][]keyboard.Keycode{
		{
			jp.KeyA, jp.KeyB, jp.KeyC, jp.KeyD,
			jp.KeyE, jp.KeyF, jp.KeyG, jp.KeyH,
			jp.KeyI, jp.KeyJ, jp.KeyK, jp.KeyL,
		},
	})
	sm.SetCallback(func(layer, index int, state keyboard.State) {
		row := index / 4
		col := index % 4
		fmt.Printf("sm: %d %d %d %d\n", layer, row, col, state)
		rowx := row
		if col%2 == 1 {
			rowx = 3 - row - 1
		}
		c := rand.Int()
		wsLeds[rowx+3*col] = color.RGBA{
			byte(c>>16) & 0x3F,
			byte(c>>8) & 0x3F,
			byte(c>>0) & 0x3F,
			0xFF,
		}
		if state == keyboard.PressToRelease {
			wsLeds[rowx+3*col] = black
		}
		fmt.Printf("%#v\n", wsLeds)
		changed.Set(1)
	})

	d.AddRotaryKeyboard(machine.D5, machine.D10, [][]keyboard.Keycode{
		{
			jp.KeyMediaVolumeDec, jp.KeyMediaVolumeInc,
		},
	})

	d.AddRotaryKeyboard(machine.D9, machine.D8, [][]keyboard.Keycode{
		{
			jp.WheelDown, jp.WheelUp,
		},
	})

	gpioPins := []machine.Pin{machine.D7, machine.D6}
	for c := range gpioPins {
		gpioPins[c].Configure(machine.PinConfig{Mode: machine.PinInputPullup})
	}
	d.AddGpioKeyboard(gpioPins, [][]keyboard.Keycode{
		{
			jp.MouseLeft, jp.MouseRight,
		},
	})

	// for Vial
	keyboard.KeyboardDef = []byte{0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00, 0x00, 0x04, 0xE6, 0xD6, 0xB4, 0x46, 0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00, 0x74, 0x2F, 0xE5, 0xA3, 0xE0, 0x01, 0x4F, 0x00, 0xC0, 0x5D, 0x00, 0x3D, 0x88, 0x89, 0xC6, 0x54, 0x36, 0xC3, 0x17, 0x4F, 0xE4, 0xFA, 0x84, 0x23, 0x76, 0xB7, 0xFC, 0x71, 0xB2, 0x7F, 0x41, 0x4D, 0xFE, 0xBC, 0x9E, 0x91, 0x36, 0x41, 0x52, 0x7B, 0x83, 0xB3, 0xD4, 0x51, 0x58, 0xBE, 0xA4, 0x9D, 0x66, 0xDC, 0x6C, 0xB5, 0xC8, 0xD4, 0x35, 0x5D, 0xD6, 0xA7, 0xE9, 0x94, 0x2E, 0xED, 0xE5, 0x4D, 0x1D, 0x5B, 0xEB, 0x4D, 0x80, 0x83, 0x9A, 0x8E, 0x2B, 0x8A, 0x56, 0x36, 0x48, 0x97, 0x8D, 0x9D, 0x1B, 0x4E, 0xC7, 0x01, 0x32, 0x49, 0x26, 0x8C, 0xE7, 0x2B, 0x11, 0xDA, 0xA7, 0x59, 0x34, 0x11, 0x97, 0x3A, 0xE6, 0x48, 0xF7, 0x90, 0x49, 0xDA, 0xD9, 0x79, 0x3A, 0x29, 0x8A, 0x21, 0xB5, 0x73, 0xE9, 0xAD, 0xE5, 0xDB, 0xD8, 0xBD, 0x2C, 0xB0, 0x93, 0x3C, 0x25, 0x2D, 0x1A, 0x55, 0x54, 0xC3, 0xDA, 0xF7, 0x79, 0x6C, 0xA2, 0x1A, 0x38, 0x62, 0xFD, 0x9B, 0xF9, 0x22, 0x34, 0xFF, 0xB7, 0x7F, 0x65, 0x56, 0xAF, 0x2E, 0x4B, 0xA9, 0x9D, 0x80, 0x53, 0x83, 0x74, 0x97, 0x52, 0x3A, 0x78, 0x1A, 0x00, 0x06, 0xE1, 0x5B, 0x79, 0xB8, 0xC3, 0xB8, 0x2F, 0x0E, 0x5B, 0x0B, 0xCD, 0x3A, 0x99, 0x1B, 0x46, 0x6B, 0xFF, 0xC0, 0xD4, 0x35, 0xEB, 0xFF, 0x1E, 0x70, 0xED, 0x92, 0x70, 0x96, 0x00, 0x20, 0xB5, 0xA6, 0xEC, 0x1C, 0xAD, 0xEF, 0x26, 0xB5, 0x91, 0x6A, 0x9E, 0x00, 0x04, 0x9A, 0xFC, 0x24, 0x5D, 0x49, 0xCA, 0x5F, 0x00, 0x01, 0xDC, 0x01, 0xD0, 0x02, 0x00, 0x00, 0xCE, 0x4C, 0x19, 0xBE, 0xB1, 0xC4, 0x67, 0xFB, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x59, 0x5A}

	err := d.Init()
	if err != nil {
		return err
	}

	cont := true
	ticker := time.Tick(4 * time.Millisecond)
	for cont {
		<-ticker
		err := d.Tick()
		if err != nil {
			return err
		}
		if changed.Get() != 0 {
			ws.WriteColors(wsLeds[:])
			changed.Set(0)
		}
	}

	return nil
}
