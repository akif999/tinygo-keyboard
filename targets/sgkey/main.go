package main

import (
	"context"
	_ "embed"
	"fmt"
	"image/color"
	"log"
	"machine"
	"machine/usb"

	keyboard "github.com/sago35/tinygo-keyboard"
	"github.com/sago35/tinygo-keyboard/keycodes/jp"
	"tinygo.org/x/drivers/ssd1306"
	"tinygo.org/x/tinydraw"
)

//go:embed vial.json
var def []byte

func main() {
	usb.Product = "sgkey-0.1.0"

	err := run()
	if err != nil {
		log.Fatal(err)
	}
}

type RCS struct {
	row, col int
	state    keyboard.State
}

func run() error {
	machine.I2C0.Configure(machine.I2CConfig{
		Frequency: machine.TWI_FREQ_400KHZ,
	})

	ch := make(chan RCS, 16)

	display := ssd1306.NewI2C(machine.I2C0)
	display.Configure(ssd1306.Config{
		Address: 0x3C,
		Width:   128,
		Height:  64,
	})
	display.ClearDisplay()

	d := keyboard.New()

	colPins := []machine.Pin{
		machine.D8,
		machine.D9,
		machine.D10,
	}

	rowPins := []machine.Pin{
		machine.D1,
		machine.D2,
	}

	mk := d.AddMatrixKeyboard(colPins, rowPins, [][]keyboard.Keycode{
		{
			jp.KeyT, jp.KeyI, jp.KeyN,
			jp.KeyY, jp.KeyG, jp.KeyO,
		},
	})
	mk.SetCallback(func(layer, index int, state keyboard.State) {
		row := index / len(colPins)
		col := index % len(colPins)
		fmt.Printf("mk: %d %d %d %d\n", layer, row, col, state)
		select {
		case ch <- RCS{row: row, col: col, state: state}:
		}
	})

	go func() {
		for {
			select {
			case x := <-ch:
				c := color.RGBA{255, 255, 255, 255}
				if x.state == keyboard.PressToRelease {
					c = color.RGBA{0, 0, 0, 255}
				}
				tinydraw.FilledRectangle(&display, 10+20*int16(x.col), 10+20*int16(x.row), 18, 18, c)
				display.Display()
			}
		}
	}()

	// for Vial
	keyboard.KeyboardDef = []byte{0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00, 0x00, 0x04, 0xE6, 0xD6, 0xB4, 0x46, 0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00, 0x74, 0x2F, 0xE5, 0xA3, 0xE0, 0x00, 0x9D, 0x00, 0x7E, 0x5D, 0x00, 0x3D, 0x88, 0x89, 0xC6, 0x54, 0x36, 0xC3, 0x17, 0x4F, 0xE4, 0xFA, 0x84, 0x23, 0x76, 0xB7, 0xFC, 0x71, 0xB2, 0x03, 0x53, 0x96, 0xCF, 0xDE, 0x33, 0xED, 0xA3, 0x0C, 0xAA, 0xBE, 0xB4, 0x80, 0xAD, 0x2C, 0x3C, 0xD9, 0x5B, 0x99, 0xDB, 0xA4, 0xBA, 0xF0, 0xD1, 0xBB, 0xB4, 0xB2, 0x0C, 0x9B, 0xB2, 0x41, 0xFF, 0x76, 0x4C, 0x04, 0xB2, 0x80, 0xBE, 0xCB, 0xC9, 0x31, 0x7B, 0x50, 0x26, 0x2E, 0xEC, 0x73, 0x2A, 0xCF, 0x2D, 0x81, 0x28, 0x05, 0x05, 0xF5, 0xAA, 0x4B, 0xC6, 0x49, 0x74, 0xA5, 0xF0, 0x4D, 0x90, 0x7E, 0xA5, 0xA7, 0x5D, 0x6A, 0x2F, 0x33, 0x4B, 0xB1, 0x08, 0xF2, 0x20, 0xE4, 0xE1, 0x9E, 0x4A, 0x27, 0xD7, 0xBF, 0x19, 0x15, 0x1A, 0x80, 0xDE, 0x24, 0x72, 0xA9, 0xE5, 0xDB, 0xEF, 0x69, 0xBF, 0xCE, 0x76, 0x96, 0x21, 0x50, 0xF8, 0x78, 0x4F, 0x8E, 0x18, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x4F, 0x04, 0xCD, 0x9B, 0xD9, 0x3C, 0x57, 0x9C, 0x00, 0x01, 0x9A, 0x01, 0x9E, 0x01, 0x00, 0x00, 0xE8, 0x34, 0x95, 0x1E, 0xB1, 0xC4, 0x67, 0xFB, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x59, 0x5A}

	d.Debug = true
	return d.Loop(context.Background())
}
