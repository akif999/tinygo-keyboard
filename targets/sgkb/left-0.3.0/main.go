package main

import (
	"context"
	_ "embed"
	"fmt"
	"machine"
	"machine/usb"
	"time"

	keyboard "github.com/sago35/tinygo-keyboard"
	"github.com/sago35/tinygo-keyboard/keycodes/jp"
)

//go:embed vial.json
var def []byte

func main() {
	usb.Product = "sgkb-0.3.0"

	err := run()
	if err != nil {
		// log.Fatal(err)
		go func() {
			for {
				fmt.Println(err)
				time.Sleep(1000 * time.Millisecond)
			}
		}()
	}
}

func run() error {
	d := keyboard.New()

	colPins := []machine.Pin{
		machine.D5,
		machine.D10,
		machine.D9,
		machine.D8,
		machine.D6,
	}

	rowPins := []machine.Pin{
		machine.D0,
		machine.D1,
		machine.D2,
		machine.D3,
		machine.D4,
	}

	dk := d.AddDuplexMatrixKeyboard(colPins, rowPins, [][]keyboard.Keycode{
		{
			0, jp.KeyEsc, jp.Key1, jp.Key2, jp.Key3, jp.Key4, jp.Key5, jp.Key6, 0, 0,
			0, jp.KeyTab, jp.KeyQ, jp.KeyW, jp.KeyE, jp.KeyR, jp.KeyT, 0, 0, 0,
			0, jp.KeyLeftCtrl, jp.KeyA, jp.KeyS, jp.KeyD, jp.KeyF, jp.KeyG, 0, 0, 0,
			0, jp.KeyLeftShift, jp.KeyZ, jp.KeyX, jp.KeyC, jp.KeyV, jp.KeyB, 0, 0, 0,
			jp.KeyMod1, jp.KeyLeftCtrl, jp.KeyWindows, jp.KeyLeftAlt, jp.KeyMod1, jp.KeySpace, 0, 0, 0,
		},
		{
			0, jp.KeyEsc, jp.KeyF1, jp.KeyF2, jp.KeyF3, jp.KeyF4, jp.KeyF5, jp.KeyF6, 0, 0,
			0, jp.KeyTab, jp.KeyQ, jp.KeyF15, jp.KeyEnd, jp.KeyF17, jp.KeyF18, 0, 0, 0,
			0, jp.KeyLeftCtrl, jp.KeyHome, jp.KeyS, jp.MouseRight, jp.MouseLeft, jp.MouseBack, 0, 0, 0,
			0, jp.KeyLeftShift, jp.KeyF13, jp.KeyF14, jp.MouseMiddle, jp.KeyF16, jp.MouseForward, 0, 0, 0,
			jp.KeyMod1, jp.KeyLeftCtrl, jp.KeyWindows, jp.KeyLeftAlt, jp.KeyMod1, jp.KeySpace, 0, 0, 0,
		},
	})
	dk.SetCallback(func(layer, index int, state keyboard.State) {
		fmt.Printf("dk: %d %d %d\n", layer, index, state)
	})

	uart := machine.UART0
	uart.Configure(machine.UARTConfig{TX: machine.NoPin, RX: machine.UART_RX_PIN})

	uk := d.AddUartKeyboard(50, uart, [][]keyboard.Keycode{
		{
			0, jp.Key6, jp.Key7, jp.Key8, jp.Key9, jp.Key0, jp.KeyMinus, jp.KeyHat, jp.KeyBackslash2, jp.KeyBackspace,
			0, jp.KeyY, jp.KeyU, jp.KeyI, jp.KeyO, jp.KeyP, jp.KeyAt, jp.KeyLeftBrace, jp.KeyEnter, 0,
			0, jp.KeyH, jp.KeyJ, jp.KeyK, jp.KeyL, jp.KeySemicolon, jp.KeyColon, jp.KeyRightBrace, 0, 0,
			jp.KeyB, jp.KeyN, jp.KeyM, jp.KeyComma, jp.KeyPeriod, jp.KeySlash, jp.KeyBackslash, jp.KeyUp, jp.KeyDelete, 0,
			0, jp.KeySpace, jp.KeyHenkan, jp.KeyMod1, jp.KeyLeftAlt, jp.KeyPrintscreen, jp.KeyLeft, jp.KeyDown, jp.KeyRight, 0,
		},
		{
			0, jp.KeyF6, jp.KeyF7, jp.KeyF8, jp.KeyF9, jp.KeyF10, jp.KeyF11, jp.KeyF12, jp.KeyBackslash2, jp.KeyBackspace,
			0, jp.KeyY, jp.KeyU, jp.KeyTab, jp.KeyO, jp.WheelUp, jp.KeyAt, jp.KeyLeftBrace, jp.KeyEnter, 0,
			0, jp.KeyLeft, jp.KeyDown, jp.KeyUp, jp.KeyRight, jp.KeySemicolon, jp.KeyColon, jp.KeyRightBrace, 0, 0,
			jp.MouseForward, jp.WheelDown, jp.KeyM, jp.KeyComma, jp.KeyPeriod, jp.KeySlash, jp.KeyBackslash, jp.KeyPageUp, jp.KeyDelete, 0,
			0, jp.KeySpace, jp.KeyHenkan, jp.KeyMod1, jp.KeyLeftAlt, jp.KeyPrintscreen, jp.KeyHome, jp.KeyPageDown, jp.KeyEnd, 0,
		},
	})
	uk.SetCallback(func(layer, index int, state keyboard.State) {
		fmt.Printf("uk: %d %d %d\n", layer, index, state)
	})

	// override ctrl-h to BackSpace
	d.OverrideCtrlH()

	time.Sleep(5000 * time.Millisecond)
	fmt.Println("start")
	fmt.Println(len(def))
	if err := keyboard.LoadConfig(def); err != nil {
		return err
	}
	fmt.Println("end")
	// keyboard.KeyboardDef = []byte{0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00, 0x00, 0x04, 0xE6, 0xD6, 0xB4, 0x46, 0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00, 0x74, 0x2F, 0xE5, 0xA3, 0xE0, 0x02, 0xFE, 0x01, 0x1A, 0x5D, 0x00, 0x3D, 0x88, 0x89, 0xC6, 0x54, 0x36, 0xC3, 0x17, 0x4F, 0xE4, 0xF9, 0xE8, 0x88, 0xA8, 0x34, 0x1C, 0xD8, 0xEE, 0x0A, 0x06, 0xA7, 0xF3, 0xD3, 0x76, 0xF3, 0x9E, 0xD8, 0x2A, 0x1D, 0xB3, 0x6E, 0xAD, 0x3A, 0x96, 0xB5, 0xAF, 0x10, 0x11, 0xFF, 0x76, 0x4B, 0x68, 0xD4, 0xED, 0xEB, 0x7C, 0x7C, 0xA7, 0x55, 0xB5, 0x36, 0x6A, 0x10, 0x87, 0x37, 0xA6, 0x5C, 0x00, 0x54, 0xB2, 0x86, 0x32, 0xB5, 0x2E, 0xF3, 0xE0, 0x3E, 0x8D, 0x88, 0x5A, 0x7D, 0x3F, 0x75, 0x6A, 0xA9, 0x52, 0x4C, 0x8E, 0x3D, 0x0E, 0xB0, 0x76, 0x22, 0x48, 0xE8, 0x62, 0x4A, 0x96, 0xEC, 0x2E, 0xCA, 0x53, 0x6C, 0xEE, 0x64, 0xEC, 0xB9, 0x19, 0x83, 0xCF, 0xE9, 0x36, 0x06, 0x44, 0xA5, 0xF6, 0xEC, 0xC5, 0xD7, 0x8B, 0x7B, 0x87, 0x51, 0x6D, 0x75, 0x8D, 0x70, 0x2C, 0x65, 0x5E, 0x47, 0xA0, 0x50, 0x05, 0x00, 0x45, 0x5B, 0xD9, 0xA3, 0xC3, 0xC8, 0x7C, 0xBD, 0x83, 0x6C, 0x57, 0xD9, 0x61, 0xB1, 0x57, 0x09, 0x2B, 0x96, 0x4B, 0x1C, 0x72, 0x61, 0x0B, 0xE2, 0x46, 0xF8, 0x59, 0x42, 0x9E, 0x21, 0x40, 0xFE, 0xB1, 0x7A, 0x77, 0x80, 0x86, 0x41, 0x1C, 0x0F, 0x30, 0x5D, 0xB5, 0x99, 0x84, 0xCE, 0xBA, 0xBF, 0x63, 0x76, 0xAF, 0xD3, 0x16, 0x89, 0x77, 0x21, 0x79, 0x2B, 0x55, 0x65, 0xD2, 0xCB, 0xBF, 0x53, 0xEC, 0x03, 0x77, 0x0F, 0x45, 0x0D, 0xF8, 0x6C, 0x96, 0x2C, 0x04, 0x22, 0x6F, 0xCB, 0xA2, 0xA1, 0x0A, 0xF2, 0x1B, 0x6A, 0x4C, 0x98, 0xA2, 0x20, 0x57, 0xA2, 0x3D, 0xB4, 0x77, 0xB4, 0x5F, 0x79, 0xE6, 0x76, 0x95, 0x1D, 0x54, 0x96, 0x5E, 0x85, 0x9E, 0x34, 0x04, 0x45, 0x18, 0x07, 0x5F, 0x22, 0x8E, 0xE9, 0x53, 0xD3, 0xCE, 0x6E, 0x67, 0xE8, 0x9F, 0x98, 0x4E, 0x8C, 0x74, 0x0D, 0xD1, 0x45, 0x66, 0xAD, 0x35, 0x04, 0x25, 0x8B, 0xB4, 0xA9, 0x2D, 0x71, 0x29, 0x11, 0x4D, 0xB4, 0x1F, 0x1C, 0x8D, 0x91, 0x22, 0x8F, 0x37, 0x07, 0x64, 0xB2, 0x9B, 0xE3, 0xA4, 0x94, 0xB0, 0x00, 0x00, 0x00, 0x4B, 0x63, 0xA4, 0x5C, 0x3B, 0xC9, 0x03, 0x05, 0x00, 0x01, 0xB6, 0x02, 0xFF, 0x05, 0x00, 0x00, 0xCF, 0xB3, 0xC8, 0xAD, 0xB1, 0xC4, 0x67, 0xFB, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x59, 0x5A}

	return d.Loop(context.Background())
}
